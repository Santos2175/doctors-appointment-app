// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum UserRole {
 UNASSIGNED
 PATIENT
 DOCTOR 
 ADMIN
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

// User table
model User {
  id           String @id @default(uuid())
  clerkUserId  String @unique
  email        String @unique
  name         String?
  imageUrl     String?
  role         UserRole @default(UNASSIGNED) //UNASSIGNED, PATIENT, DOCTOR, ADMIN
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Patient specific field
  credits      Int @default(2)

  // Doctor-specific field
  speciality     String?
  experience     Int?
  crediantialUrl String?
  description    String?
  verificationStatus VerificationStatus @default(PENDING)

  // Relations
  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments  Appointment[] @relation("DoctorAppointments")
  availabilities      Availability[]
  transactions        CreditTransaction[]

}

enum SlotStatus {
  AVAILABLE
  BOOKED
  BLOCKED
}

// Availability table
model Availability {
  id        String @id @default(uuid())
  doctorId  String
  doctor    User @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  startTime DateTime
  endTime   DateTime
  status    SlotStatus @default(AVAILABLE)

  @@index([doctorId,startTime])
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

// Appointment table
model Appointment {
  id          String @id @default(uuid())
  patientId   String
  patient     User @relation("PatientAppointments", fields: [patientId], references: [id])
  doctorId    String
  doctor      User @relation("DoctorAppointments", fields: [doctorId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      AppointmentStatus @default(SCHEDULED)
  notes       String? @db.Text
  patientDescription String? @db.Text


  // video session fields
  videoSessionId     String?
  videoSessionToken  String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  @@index([status,startTime])
  @@index([doctorId,startTime])
}

enum TransactionType {
  CREDIT_PURCHASE          // Credits purchased through Clerk Billing
  APPOINTMENT_DEDUCTION    // Credit used for appointment
  ADMIN_ADJUSTMENT         // Credit adjustment by admin
}

// Transaction table
model CreditTransaction {
  id            String @id @default(uuid())
  userId        String
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Int
  type          TransactionType
  packageId     String?   // Reference to which package was purchased
  createdAt     DateTime @default(now())
}